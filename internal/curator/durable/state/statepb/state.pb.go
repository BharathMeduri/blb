// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/curator/durable/state/statepb/state.proto

/*
	Package statepb is a generated protocol buffer package.

	It is generated from these files:
		internal/curator/durable/state/statepb/state.proto

	It has these top-level messages:
		Tract
		Blob
		Partition
		RSChunk
*/
package statepb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import core "github.com/westerndigitalcorporation/blb/internal/core"

import github_com_westerndigitalcorporation_blb_internal_core "github.com/westerndigitalcorporation/blb/internal/core"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Tract struct {
	// Used for REPLICATED class.
	Hosts   []github_com_westerndigitalcorporation_blb_internal_core.TractserverID `protobuf:"varint,1,rep,name=hosts,casttype=github.com/westerndigitalcorporation/blb/internal/core.TractserverID" json:"hosts,omitempty"`
	Version int                                                                    `protobuf:"varint,2,opt,name=version,casttype=int" json:"version"`
	// Used for RS_X classes. The values here are always 10 bytes (80 bits).
	// There must be exactly one of these for each RS_n_m enum value in
	// core.StorageClass.
	Rs63Chunk  []byte `protobuf:"bytes,11,opt,name=rs63_chunk,json=rs63Chunk" json:"rs63_chunk,omitempty"`
	Rs83Chunk  []byte `protobuf:"bytes,12,opt,name=rs83_chunk,json=rs83Chunk" json:"rs83_chunk,omitempty"`
	Rs103Chunk []byte `protobuf:"bytes,13,opt,name=rs103_chunk,json=rs103Chunk" json:"rs103_chunk,omitempty"`
	Rs125Chunk []byte `protobuf:"bytes,14,opt,name=rs125_chunk,json=rs125Chunk" json:"rs125_chunk,omitempty"`
}

func (m *Tract) Reset()                    { *m = Tract{} }
func (m *Tract) String() string            { return proto.CompactTextString(m) }
func (*Tract) ProtoMessage()               {}
func (*Tract) Descriptor() ([]byte, []int) { return fileDescriptorState, []int{0} }

func (m *Tract) GetHosts() []github_com_westerndigitalcorporation_blb_internal_core.TractserverID {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *Tract) GetVersion() int {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Tract) GetRs63Chunk() []byte {
	if m != nil {
		return m.Rs63Chunk
	}
	return nil
}

func (m *Tract) GetRs83Chunk() []byte {
	if m != nil {
		return m.Rs83Chunk
	}
	return nil
}

func (m *Tract) GetRs103Chunk() []byte {
	if m != nil {
		return m.Rs103Chunk
	}
	return nil
}

func (m *Tract) GetRs125Chunk() []byte {
	if m != nil {
		return m.Rs125Chunk
	}
	return nil
}

type Blob struct {
	// Storage class for this blob (applies to all tracts).
	Storage *core.StorageClass `protobuf:"varint,4,opt,name=storage,enum=core.StorageClass,def=0" json:"storage,omitempty"`
	// Client storage hint.
	Hint   *core.StorageHint `protobuf:"varint,5,opt,name=hint,enum=core.StorageHint,def=0" json:"hint,omitempty"`
	Tracts []*Tract          `protobuf:"bytes,1,rep,name=tracts" json:"tracts,omitempty"`
	Repl   *uint32           `protobuf:"varint,2,opt,name=repl" json:"repl,omitempty"`
	// Time that this blob was deleted, or zero if it is not deleted.
	Deleted *int64 `protobuf:"varint,3,opt,name=deleted,def=0" json:"deleted,omitempty"`
	// Time of last open for write.
	Mtime *int64 `protobuf:"varint,10,opt,name=mtime" json:"mtime,omitempty"`
	// Time of last open for read.
	Atime *int64 `protobuf:"varint,11,opt,name=atime" json:"atime,omitempty"`
	// Time that this blob can be automatically deleted, or zero if it is permanent.
	Expires *int64 `protobuf:"varint,12,opt,name=expires,def=0" json:"expires,omitempty"`
}

func (m *Blob) Reset()                    { *m = Blob{} }
func (m *Blob) String() string            { return proto.CompactTextString(m) }
func (*Blob) ProtoMessage()               {}
func (*Blob) Descriptor() ([]byte, []int) { return fileDescriptorState, []int{1} }

const Default_Blob_Storage core.StorageClass = core.StorageClass_REPLICATED
const Default_Blob_Hint core.StorageHint = core.StorageHint_DEFAULT
const Default_Blob_Deleted int64 = 0
const Default_Blob_Expires int64 = 0

func (m *Blob) GetStorage() core.StorageClass {
	if m != nil && m.Storage != nil {
		return *m.Storage
	}
	return Default_Blob_Storage
}

func (m *Blob) GetHint() core.StorageHint {
	if m != nil && m.Hint != nil {
		return *m.Hint
	}
	return Default_Blob_Hint
}

func (m *Blob) GetTracts() []*Tract {
	if m != nil {
		return m.Tracts
	}
	return nil
}

func (m *Blob) GetRepl() uint32 {
	if m != nil && m.Repl != nil {
		return *m.Repl
	}
	return 0
}

func (m *Blob) GetDeleted() int64 {
	if m != nil && m.Deleted != nil {
		return *m.Deleted
	}
	return Default_Blob_Deleted
}

func (m *Blob) GetMtime() int64 {
	if m != nil && m.Mtime != nil {
		return *m.Mtime
	}
	return 0
}

func (m *Blob) GetAtime() int64 {
	if m != nil && m.Atime != nil {
		return *m.Atime
	}
	return 0
}

func (m *Blob) GetExpires() int64 {
	if m != nil && m.Expires != nil {
		return *m.Expires
	}
	return Default_Blob_Expires
}

type Partition struct {
	Id             *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	NextBlobKey    *uint32 `protobuf:"varint,2,opt,name=next_blob_key,json=nextBlobKey" json:"next_blob_key,omitempty"`
	NextRsChunkKey *uint64 `protobuf:"varint,3,opt,name=next_rs_chunk_key,json=nextRsChunkKey" json:"next_rs_chunk_key,omitempty"`
}

func (m *Partition) Reset()                    { *m = Partition{} }
func (m *Partition) String() string            { return proto.CompactTextString(m) }
func (*Partition) ProtoMessage()               {}
func (*Partition) Descriptor() ([]byte, []int) { return fileDescriptorState, []int{2} }

func (m *Partition) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Partition) GetNextBlobKey() uint32 {
	if m != nil && m.NextBlobKey != nil {
		return *m.NextBlobKey
	}
	return 0
}

func (m *Partition) GetNextRsChunkKey() uint64 {
	if m != nil && m.NextRsChunkKey != nil {
		return *m.NextRsChunkKey
	}
	return 0
}

// RSChunk describes a coded set of some number of data tracts. For coding with
// RS N,M (N data and M parity), there will be exactly N values in "data" and
// N+M values in "hosts", the first N referring to the locations of the data
// pieces and the following M referring to the locations of the parity pieces.
// The number of real tracts within a data piece can be anything.
// N and M are not encoded explicitly in RSChunk since they can be determined
// from the lengths of data and hosts.
type RSChunk struct {
	Data  []*RSChunk_Data                                                        `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Hosts []github_com_westerndigitalcorporation_blb_internal_core.TractserverID `protobuf:"varint,2,rep,name=hosts,casttype=github.com/westerndigitalcorporation/blb/internal/core.TractserverID" json:"hosts,omitempty"`
}

func (m *RSChunk) Reset()                    { *m = RSChunk{} }
func (m *RSChunk) String() string            { return proto.CompactTextString(m) }
func (*RSChunk) ProtoMessage()               {}
func (*RSChunk) Descriptor() ([]byte, []int) { return fileDescriptorState, []int{3} }

func (m *RSChunk) GetData() []*RSChunk_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RSChunk) GetHosts() []github_com_westerndigitalcorporation_blb_internal_core.TractserverID {
	if m != nil {
		return m.Hosts
	}
	return nil
}

type RSChunk_Data struct {
	Tracts []*RSChunk_Data_Tract `protobuf:"bytes,1,rep,name=tracts" json:"tracts,omitempty"`
}

func (m *RSChunk_Data) Reset()                    { *m = RSChunk_Data{} }
func (m *RSChunk_Data) String() string            { return proto.CompactTextString(m) }
func (*RSChunk_Data) ProtoMessage()               {}
func (*RSChunk_Data) Descriptor() ([]byte, []int) { return fileDescriptorState, []int{3, 0} }

func (m *RSChunk_Data) GetTracts() []*RSChunk_Data_Tract {
	if m != nil {
		return m.Tracts
	}
	return nil
}

type RSChunk_Data_Tract struct {
	Id     github_com_westerndigitalcorporation_blb_internal_core.TractID `protobuf:"bytes,1,opt,name=id,customtype=github.com/westerndigitalcorporation/blb/internal/core.TractID" json:"id"`
	Length uint32                                                         `protobuf:"varint,2,opt,name=length" json:"length"`
	Offset uint32                                                         `protobuf:"varint,3,opt,name=offset" json:"offset"`
}

func (m *RSChunk_Data_Tract) Reset()                    { *m = RSChunk_Data_Tract{} }
func (m *RSChunk_Data_Tract) String() string            { return proto.CompactTextString(m) }
func (*RSChunk_Data_Tract) ProtoMessage()               {}
func (*RSChunk_Data_Tract) Descriptor() ([]byte, []int) { return fileDescriptorState, []int{3, 0, 0} }

func (m *RSChunk_Data_Tract) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *RSChunk_Data_Tract) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func init() {
	proto.RegisterType((*Tract)(nil), "statepb.Tract")
	proto.RegisterType((*Blob)(nil), "statepb.Blob")
	proto.RegisterType((*Partition)(nil), "statepb.Partition")
	proto.RegisterType((*RSChunk)(nil), "statepb.RSChunk")
	proto.RegisterType((*RSChunk_Data)(nil), "statepb.RSChunk.Data")
	proto.RegisterType((*RSChunk_Data_Tract)(nil), "statepb.RSChunk.Data.Tract")
}
func (m *Tract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tract) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hosts) > 0 {
		for _, num := range m.Hosts {
			dAtA[i] = 0x8
			i++
			i = encodeVarintState(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintState(dAtA, i, uint64(m.Version))
	if m.Rs63Chunk != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintState(dAtA, i, uint64(len(m.Rs63Chunk)))
		i += copy(dAtA[i:], m.Rs63Chunk)
	}
	if m.Rs83Chunk != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintState(dAtA, i, uint64(len(m.Rs83Chunk)))
		i += copy(dAtA[i:], m.Rs83Chunk)
	}
	if m.Rs103Chunk != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintState(dAtA, i, uint64(len(m.Rs103Chunk)))
		i += copy(dAtA[i:], m.Rs103Chunk)
	}
	if m.Rs125Chunk != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintState(dAtA, i, uint64(len(m.Rs125Chunk)))
		i += copy(dAtA[i:], m.Rs125Chunk)
	}
	return i, nil
}

func (m *Blob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Blob) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tracts) > 0 {
		for _, msg := range m.Tracts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Repl != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintState(dAtA, i, uint64(*m.Repl))
	}
	if m.Deleted != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintState(dAtA, i, uint64(*m.Deleted))
	}
	if m.Storage != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintState(dAtA, i, uint64(*m.Storage))
	}
	if m.Hint != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintState(dAtA, i, uint64(*m.Hint))
	}
	if m.Mtime != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintState(dAtA, i, uint64(*m.Mtime))
	}
	if m.Atime != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintState(dAtA, i, uint64(*m.Atime))
	}
	if m.Expires != nil {
		dAtA[i] = 0x60
		i++
		i = encodeVarintState(dAtA, i, uint64(*m.Expires))
	}
	return i, nil
}

func (m *Partition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Partition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0x8
		i++
		i = encodeVarintState(dAtA, i, uint64(*m.Id))
	}
	if m.NextBlobKey != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintState(dAtA, i, uint64(*m.NextBlobKey))
	}
	if m.NextRsChunkKey != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintState(dAtA, i, uint64(*m.NextRsChunkKey))
	}
	return i, nil
}

func (m *RSChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RSChunk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Hosts) > 0 {
		for _, num := range m.Hosts {
			dAtA[i] = 0x10
			i++
			i = encodeVarintState(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *RSChunk_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RSChunk_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tracts) > 0 {
		for _, msg := range m.Tracts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RSChunk_Data_Tract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RSChunk_Data_Tract) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintState(dAtA, i, uint64(m.Id.Size()))
	n1, err := m.Id.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x10
	i++
	i = encodeVarintState(dAtA, i, uint64(m.Length))
	dAtA[i] = 0x18
	i++
	i = encodeVarintState(dAtA, i, uint64(m.Offset))
	return i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Tract) Size() (n int) {
	var l int
	_ = l
	if len(m.Hosts) > 0 {
		for _, e := range m.Hosts {
			n += 1 + sovState(uint64(e))
		}
	}
	n += 1 + sovState(uint64(m.Version))
	if m.Rs63Chunk != nil {
		l = len(m.Rs63Chunk)
		n += 1 + l + sovState(uint64(l))
	}
	if m.Rs83Chunk != nil {
		l = len(m.Rs83Chunk)
		n += 1 + l + sovState(uint64(l))
	}
	if m.Rs103Chunk != nil {
		l = len(m.Rs103Chunk)
		n += 1 + l + sovState(uint64(l))
	}
	if m.Rs125Chunk != nil {
		l = len(m.Rs125Chunk)
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func (m *Blob) Size() (n int) {
	var l int
	_ = l
	if len(m.Tracts) > 0 {
		for _, e := range m.Tracts {
			l = e.Size()
			n += 1 + l + sovState(uint64(l))
		}
	}
	if m.Repl != nil {
		n += 1 + sovState(uint64(*m.Repl))
	}
	if m.Deleted != nil {
		n += 1 + sovState(uint64(*m.Deleted))
	}
	if m.Storage != nil {
		n += 1 + sovState(uint64(*m.Storage))
	}
	if m.Hint != nil {
		n += 1 + sovState(uint64(*m.Hint))
	}
	if m.Mtime != nil {
		n += 1 + sovState(uint64(*m.Mtime))
	}
	if m.Atime != nil {
		n += 1 + sovState(uint64(*m.Atime))
	}
	if m.Expires != nil {
		n += 1 + sovState(uint64(*m.Expires))
	}
	return n
}

func (m *Partition) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovState(uint64(*m.Id))
	}
	if m.NextBlobKey != nil {
		n += 1 + sovState(uint64(*m.NextBlobKey))
	}
	if m.NextRsChunkKey != nil {
		n += 1 + sovState(uint64(*m.NextRsChunkKey))
	}
	return n
}

func (m *RSChunk) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovState(uint64(l))
		}
	}
	if len(m.Hosts) > 0 {
		for _, e := range m.Hosts {
			n += 1 + sovState(uint64(e))
		}
	}
	return n
}

func (m *RSChunk_Data) Size() (n int) {
	var l int
	_ = l
	if len(m.Tracts) > 0 {
		for _, e := range m.Tracts {
			l = e.Size()
			n += 1 + l + sovState(uint64(l))
		}
	}
	return n
}

func (m *RSChunk_Data_Tract) Size() (n int) {
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovState(uint64(l))
	n += 1 + sovState(uint64(m.Length))
	n += 1 + sovState(uint64(m.Offset))
	return n
}

func sovState(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v github_com_westerndigitalcorporation_blb_internal_core.TractserverID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_westerndigitalcorporation_blb_internal_core.TractserverID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Hosts = append(m.Hosts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthState
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v github_com_westerndigitalcorporation_blb_internal_core.TractserverID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_westerndigitalcorporation_blb_internal_core.TractserverID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Hosts = append(m.Hosts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Hosts", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rs63Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rs63Chunk = append(m.Rs63Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Rs63Chunk == nil {
				m.Rs63Chunk = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rs83Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rs83Chunk = append(m.Rs83Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Rs83Chunk == nil {
				m.Rs83Chunk = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rs103Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rs103Chunk = append(m.Rs103Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Rs103Chunk == nil {
				m.Rs103Chunk = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rs125Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rs125Chunk = append(m.Rs125Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Rs125Chunk == nil {
				m.Rs125Chunk = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Blob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Blob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Blob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tracts = append(m.Tracts, &Tract{})
			if err := m.Tracts[len(m.Tracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repl", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Repl = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			var v core.StorageClass
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (core.StorageClass(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Storage = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hint", wireType)
			}
			var v core.StorageHint
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (core.StorageHint(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hint = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mtime = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Atime = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expires = &v
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Partition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Partition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Partition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextBlobKey", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NextBlobKey = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRsChunkKey", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NextRsChunkKey = &v
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RSChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RSChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RSChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RSChunk_Data{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v github_com_westerndigitalcorporation_blb_internal_core.TractserverID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_westerndigitalcorporation_blb_internal_core.TractserverID(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Hosts = append(m.Hosts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthState
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v github_com_westerndigitalcorporation_blb_internal_core.TractserverID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_westerndigitalcorporation_blb_internal_core.TractserverID(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Hosts = append(m.Hosts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Hosts", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RSChunk_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tracts = append(m.Tracts, &RSChunk_Data_Tract{})
			if err := m.Tracts[len(m.Tracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RSChunk_Data_Tract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowState
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipState(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthState = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("internal/curator/durable/state/statepb/state.proto", fileDescriptorState)
}

var fileDescriptorState = []byte{
	// 622 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x41, 0x4f, 0xdb, 0x30,
	0x14, 0x26, 0x69, 0x4a, 0xc5, 0x2b, 0xad, 0x86, 0xc5, 0xa4, 0xa8, 0x6c, 0x6d, 0x55, 0x69, 0x53,
	0xb9, 0x24, 0xac, 0x88, 0x09, 0x71, 0x98, 0x44, 0x29, 0x08, 0x04, 0x07, 0x64, 0xd8, 0x8e, 0x43,
	0x4e, 0x63, 0x5a, 0x8f, 0x10, 0x57, 0xb6, 0xcb, 0xe0, 0x4f, 0x4c, 0xd3, 0xae, 0xfb, 0x43, 0x1c,
	0x77, 0xdd, 0x0e, 0xd5, 0xc4, 0xfe, 0xc0, 0xce, 0x9c, 0x26, 0xdb, 0x49, 0x59, 0xa7, 0xdd, 0xa6,
	0x5d, 0x1c, 0xfb, 0xfb, 0x3e, 0xbf, 0xbc, 0xf7, 0xbd, 0x67, 0xe8, 0xb0, 0x54, 0x51, 0x91, 0x92,
	0x24, 0xec, 0x8f, 0x05, 0x51, 0x5c, 0x84, 0xf1, 0x58, 0x90, 0x28, 0xa1, 0xa1, 0x54, 0x44, 0x65,
	0xeb, 0x28, 0xb2, 0xdf, 0x60, 0x24, 0xb8, 0xe2, 0xa8, 0x94, 0x81, 0xb5, 0xe5, 0x01, 0x1f, 0x70,
	0x83, 0x85, 0x7a, 0x67, 0xe9, 0x9a, 0xff, 0x10, 0x92, 0x0b, 0x6a, 0x16, 0xcb, 0xb4, 0x3e, 0xb8,
	0x50, 0x3c, 0x15, 0xa4, 0xaf, 0xd0, 0x5b, 0x28, 0x0e, 0xb9, 0x54, 0xd2, 0x77, 0x9a, 0x85, 0x76,
	0xa5, 0xbb, 0x7f, 0x3f, 0x69, 0xf4, 0x06, 0x4c, 0x0d, 0xc7, 0x51, 0xd0, 0xe7, 0x97, 0xe1, 0x7b,
	0x2a, 0x75, 0x88, 0x98, 0x0d, 0x98, 0x22, 0x49, 0x9f, 0x8b, 0x11, 0x17, 0x44, 0x31, 0x9e, 0x86,
	0x51, 0x12, 0x85, 0x33, 0xf1, 0x03, 0x13, 0x50, 0x52, 0x71, 0x45, 0xc5, 0x41, 0x0f, 0xdb, 0xb0,
	0xe8, 0x19, 0x94, 0xae, 0xa8, 0x90, 0x8c, 0xa7, 0xbe, 0xdb, 0x74, 0xda, 0x95, 0x6e, 0xf9, 0x76,
	0xd2, 0x98, 0xbb, 0x9f, 0x34, 0x0a, 0x2c, 0x55, 0x38, 0xe7, 0xd0, 0x53, 0x00, 0x21, 0x5f, 0xae,
	0x9f, 0xf5, 0x87, 0xe3, 0xf4, 0xc2, 0x2f, 0x37, 0x9d, 0xf6, 0x22, 0x5e, 0xd0, 0xc8, 0x8e, 0x06,
	0x2c, 0xbd, 0x99, 0xd3, 0x8b, 0x39, 0xbd, 0x99, 0xd1, 0x0d, 0x28, 0x0b, 0xf9, 0x62, 0x2d, 0xe7,
	0x2b, 0x86, 0x07, 0x03, 0xfd, 0x2e, 0xe8, 0x6c, 0x64, 0x82, 0xea, 0x54, 0xd0, 0xd9, 0x30, 0x82,
	0xd6, 0x27, 0x17, 0xbc, 0x6e, 0xc2, 0x23, 0xf4, 0x1c, 0xe6, 0x95, 0xa9, 0xc3, 0x18, 0x52, 0xee,
	0x54, 0x83, 0xcc, 0x63, 0x5b, 0x1e, 0xce, 0x58, 0x84, 0xc0, 0x13, 0x74, 0x94, 0xd8, 0xa2, 0xb0,
	0xd9, 0xa3, 0x15, 0x28, 0xc5, 0x34, 0xa1, 0x8a, 0xc6, 0x7e, 0xa1, 0xe9, 0xb4, 0x0b, 0x5b, 0xce,
	0x1a, 0xce, 0x11, 0xb4, 0x09, 0x25, 0xa9, 0xb8, 0x20, 0x03, 0xea, 0x7b, 0x4d, 0xa7, 0x5d, 0xed,
	0xa0, 0xc0, 0xb8, 0x76, 0x62, 0xc1, 0x9d, 0x84, 0x48, 0xb9, 0x05, 0x78, 0xf7, 0xf8, 0xe8, 0x60,
	0x67, 0xfb, 0x74, 0xb7, 0x87, 0x73, 0x39, 0x0a, 0xc0, 0x1b, 0xb2, 0x54, 0xf9, 0x45, 0x73, 0x6d,
	0x69, 0xe6, 0xda, 0x3e, 0x4b, 0xd5, 0x56, 0xa9, 0xb7, 0xbb, 0xb7, 0xfd, 0xfa, 0xe8, 0x14, 0x1b,
	0x1d, 0x5a, 0x86, 0xe2, 0xa5, 0x62, 0x97, 0xd4, 0x07, 0x9d, 0x04, 0xb6, 0x07, 0x8d, 0x12, 0x83,
	0x96, 0x2d, 0x6a, 0x0e, 0x3a, 0x65, 0x7a, 0x3d, 0x62, 0x82, 0x4a, 0xe3, 0xaa, 0x4d, 0x39, 0x43,
	0x5a, 0xef, 0x60, 0xe1, 0x98, 0x08, 0xc5, 0x74, 0xbf, 0x51, 0x15, 0x5c, 0x16, 0xfb, 0x8e, 0x29,
	0xd7, 0x65, 0x31, 0x6a, 0x41, 0x25, 0xa5, 0xd7, 0xea, 0x2c, 0x4a, 0x78, 0x74, 0x76, 0x41, 0x6f,
	0x32, 0x27, 0xca, 0x1a, 0xd4, 0x4e, 0x1e, 0xd2, 0x1b, 0xb4, 0x0a, 0x4b, 0x46, 0x23, 0xa4, 0x35,
	0xde, 0xe8, 0xb4, 0x35, 0x1e, 0xae, 0x6a, 0x02, 0x4b, 0xe3, 0xfe, 0x21, 0xbd, 0x69, 0xfd, 0x74,
	0xa1, 0x84, 0x4f, 0x6c, 0xb7, 0x56, 0xc1, 0x8b, 0x89, 0x22, 0x59, 0x07, 0x1e, 0x4f, 0x3b, 0x90,
	0xf1, 0x41, 0x8f, 0x28, 0x82, 0x8d, 0xe4, 0x61, 0x7c, 0xdd, 0xff, 0x32, 0xbe, 0xb5, 0xaf, 0x0e,
	0x78, 0xfa, 0x77, 0x68, 0xfd, 0x8f, 0xb9, 0x58, 0xf9, 0x6b, 0x56, 0xb3, 0x43, 0x52, 0xfb, 0xec,
	0xe4, 0xcf, 0xec, 0xcd, 0xd4, 0xbd, 0xc5, 0xee, 0x9e, 0x7e, 0x01, 0xdf, 0x26, 0x8d, 0x57, 0xff,
	0x92, 0xe8, 0x41, 0xcf, 0x74, 0xe1, 0x09, 0xcc, 0x27, 0x34, 0x1d, 0xa8, 0x61, 0xf6, 0xba, 0x3c,
	0x1d, 0x1b, 0x67, 0x98, 0x66, 0xf9, 0xf9, 0xb9, 0xa4, 0xca, 0x98, 0x3e, 0x65, 0x2d, 0xd6, 0x7d,
	0x74, 0x7b, 0x57, 0x77, 0xbe, 0xdc, 0xd5, 0x9d, 0xef, 0x77, 0x75, 0xe7, 0xe3, 0x8f, 0xfa, 0xdc,
	0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x3c, 0xd3, 0x8c, 0x84, 0x04, 0x00, 0x00,
}
